-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CS 525 Assignment 3 - Buffer Manager

--------------------------------       
        Group 15 Members:
--------------------------------

Name - Milind Prabhakar
CWID - A20491343
Email- mprabhakar@hawk.iit.edu


Name - Rohan Girish
CWID - A20465714
Email- rgirish@hawk.iit.edu


Name - Suyog Vilasrao Bachhav
CWID - A20466885
Email- sbachhav@hawk.iit.edu


--------------------------------
   Steps to run the code :
--------------------------------

-> Using Terminal, navigate to the Project root (assign3). 

-> Type "ls" to list the files and confirm that we are in the correct directory. 

-> Run the command "make clean" to remove previously compiled.o files. 

-> Run the "make" command to compile all project files, including the "test assign3 1.c" file. 

-> Type "make run" to run the "test assign3 1.c" file. 

-> Type "make test expr" to compile test expression files, including "test expr.c." 

-> Type "make run expr" to run the "test expr.c" file.




## Functions

The following functions were created to implement the record manager:

### TABLE AND RECORD MANAGER FUNCTIONS

We designed this record manager with memory management in mind, freeing up any reserved space and minimizing the use of variables to the greatest extent possible. In addition to the functions described in record mgr.h, we've implemented the Tombstone mechanism.

We created this record manager with memory management in mind, freeing up any reserved space and minimizing the use of variables as much as possible. We've added the Tombstone mechanism to the functions described in record mgr.h. 

1) initRecordManager (...) 

-> This function is used to set up the record manager. 

-> We use the Storage Manager's initStorageManager(...) function to initialize the storage manager. 


2) shutdownRecordManager(...) 

-> This function is used to terminate the record manager and de-allocate all of its resources. 

-> It depletes all of the Record Manager's resources and memory space. 

-> To free up memory, we set the recordManager data structure pointer to NULL and call the C function free ().


3) createTable(...) 

-> Use this function to create a new table. The table with the name specified by the parameter name is displayed. 

-> To initialize the Buffer Pool, it calls initBufferPool (...). The LRU page replacement policy is now in effect. 

-> It sets the table's attributes (name, datatype, and size) as well as all of the table's values. 

-> After that, it creates a page file, opens it, writes the table block to it, and closes it. 


4) openTable (...) 

-> This function creates a table with the name specified in the parameter'name' in the schema specified in the parameter'schema.' 

-> Before pinning a page, reading the schema from the file, and unpinning the page, it initializes the buffer pool.


5) closeTable(...) 

-> This function closes the table specified by the parameter'rel'. 

-> It does so by calling the Buffer Manager function shutdownBufferPool (...). 

-> The buffer manager writes the table changes to the page file before closing the buffer pool. 


6) deleteTable(...) 

-> The table with the name specified by the parameter 'name' is deleted by this function. 

-> It calls the destroyPageFile function in the Storage Manager (...). 

-> The destroyPageFile(...) function deletes the page from disk and frees the memory space set aside for that mechanism. 

If destroyPageFile(...) is not RC_OK, the page will not be deleted.


7) getNumTuples(...) 

-> The number of tuples in the table specified by the parameter'rel' is returned by this function. 

-> It returns the value of the [tuplesCount] variable defined in our custom data structure for storing table meta-data.


### RECORD HANDLING FUNCTIONS:

These functions are used to get records with specific RIDs, get records with specific RIDs, insert new records, and update existing records with new values.

1) insertRecord(...) 

-> Inserts a new record into the table and updates the'record' parameter with the Record ID passed in by insertRecord (). 

-> We give the record that is being inserted a Record ID. 

-> We pin the page with an available slot. When we find an empty slot, we locate the data pointer and add a '+' to indicate the addition of a new record. 

-> Following the record insert, we mark the page dirty so that the Buffer Manager can write the page's content back to disk. 

-> We use the memcpy() C function to copy the data from the record (passed through parameter'record') into the new record, and then we unpin the page.


2) deleteRecord(...) 

-> This function is used to delete a record from the table referenced by the parameter'rel' that has the Record ID 'id' passed through the parameter. 

-> In our table, we set the freePage meta-data to the Page ID of the page whose record is to be deleted, so that this space can later be used by a new record. 

-> We pin the page and navigate to the record's data pointer, where the first character is changed to '-,' indicating that the record has been removed and is no longer required. 

-> Finally, we unpin the page and mark it as dirty so that the Buffer Manager can write the page's contents to disk.


3) updateRecord(...) 

-> This function updates a record in the table specified by the "record" parameter, which is referred to by the "rel" argument. 

-> It searches the table's meta-data for the page containing the record and adds that page to the buffer pool. 

-> It assigns a Record ID and navigates to the record's data storage location. 

-> We use the C function memcpy() to copy the data from the record (provided via parameter'record') into the new record, mark the page dirty, and then unpin the page.


4) getRecord(....)

-> This function retrieves a record from the table specified by "rel," which is also specified in the argument, using the Record ID "id" as a parameter. The recorded data is saved in the location specified by the "record" option. 

-> It locates the record's page using the table's meta-data and then pins that page in the buffer pool using the record's 'id'. 

-> It sends the data and sets the Record ID of the'record' parameter to the id of the record on the page. 

-> After that, the page is unpinned.


###  SCAN FUNCTIONS:

The Scan functions are used to find all tuples in a table that meet a predefined set of criteria (represented as an Expr). The RM ScanHandle data structure provided as an input to startScan is initialized when a scan is started. Following that, calls are made to the next method, which returns the next tuple that matches the scan condition. If the scan condition is NULL, the result is RC SCAN CONDITION NOT FOUND. When the scan is finished, the value RC_RM_NO_MORE_TUPLES is returned; otherwise, the value RC OK is returned (unless an error occurs).


1) startScan (...) 

-> The startScan() function starts a scan by reading data from the RM ScanHandle data structure, which is passed as an argument. 

-> We create the scan-related variables in our one-of-a-kind data structure. 

-> The error code RC_SCAN_CONDITION_NOT_FOUND is returned if the condition is NULL.


2) next(...) 

-> The next tuple that meets the condition is returned by this function (test expression). 

-> If condition is NULL, the error code RC_SCAN_CONDITION_NOT_FOUND is returned. 

—> If the table contains no tuples, the error code RC_RM_NO_MORE_TUPLES is returned. 

—> We loop through the table's tuples. To evaluate the test expression, tuple the page, navigate to the data location, copy data into a temporary buffer, and then use eval (....) 

—> If the test expression result (v.boolV) is TRUE, the tuple meets the requirement. The page is then unpinned, and RC_OK is returned. 

-> If none of the tuples satisfy the criterion, the error code RC_RM_NO_MORE_TUPLES is returned.

3) closeScan(...) 

-> This function ends the scanning process. 

-> To determine whether the scan was successful, we look at the scanCount value in the table's metadata. The scan was not completed if the value is greater than zero. 

-> If the scan fails, we unpin the page and reset all scan mechanism-related variables in the meta-data of our table (custom data structure). 

—> After that, the metadata space is made available (de-allocated).


### SCHEMA FUNCTIONS:

These functions are used to return the number of records for a given schema in bytes and to create a new schema.

1) getRecordSize(...) 

-> The size of a record in the specified schema is returned by this function. 

-> We iteratively go through the schema's attributes. We add the size (in bytes) required by each attribute to the variable'size' repeatedly. 

-> The value of the variable'size' represents the record's size.


2) freeSchema(...) 

-> Clears the memory associated with the schema specified by the'schema' parameter. 

-> Each page frame's variable (field) refNum is used for this. refNum keeps track of how many page frames the client has accessed. 

-> We de-allocate the memory space used by the schema, removing it from memory, using the C function free(...). 

3) createSchema(...) 

-> This function creates a new schema in memory using the parameters provided. 

—> The number of parameters is specified by numAttr. The name of the attributes is specified by attrNames. The datatype of the attributes is defined by datatypes. typeLength specifies the length of the attribute (example: length of STRING). 

-> A schema object is created and memory allocated to it. Finally, we set the schema's parameters to those specified in the createSchema function (...)


### ATTRIBUTE FUNCTIONS:

These functions are used to get or set the values of a record's attributes, as well as to create a new record for a particular schema. When creating a new record, ensure that the data field has enough memory to store the binary representations for all of the record's characteristics, as specified by the schema.


1) createRecord(...) 

-> This function creates a new record in the schema specified by the'schema' parameter and passes it to the createRecord() function'record' parameter. 

-> We make certain that the new record has enough memory. We also allocate RAM for the record's data in an amount equal to the size of the record. 

-> To indicate that this is a new blank record, we add '0' to the first position, which is NULL in C. 

Finally, we add the new record to the'record' argument. 

2) attrOffset(...) 

-> The'result' parameter of the function is set to the offset (in bytes) from the initial position to the record's selected attribute. 

-> We loop through the schema's attributes until we reach the specified attribute number. We keep adding the size (in bytes) required by each attribute to the pointer *result.

3) freeRecord(...) 

->This function frees the memory space that has been allocated to the'record' specified by the parameter. 

-> We use the C function free to free up the memory space occupied by the record (). 

4) getAttr(...) 

-> This function retrieves an attribute from the specified record in the specified schema. 

-> The parameter specifies the record, schema, and attribute number for which data is sought. The attribute data is saved to the location specified by the 'value' parameter. 

-> The attrOffset(...) function is used to find the location of an attribute. The datatype and value of the attribute are then copied to the '*value' parameter, depending on the datatype.


5) setAttr(...) 

-> This function modifies the value of an attribute in the supplied schema's record. The option accepts the data to be retrieved's record, schema, and attribute number. 

-> The 'value' option specifies the data that will be stored in the attribute. 

-> We get the attribute's location by using the attrOffset(...) function. Depending on the datatype of the attribute, the data in the '*value' parameter is then copied to the attributes datatype and value.


